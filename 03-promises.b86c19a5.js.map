{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAEJ,IAAMC,EAAQF,EAAIG,OAAOC,SAASC,MAAMC,MAClCC,EAAOP,EAAIG,OAAOC,SAASG,KAAKD,MAChCE,EAASR,EAAIG,OAAOC,SAASI,OAAOF,MACtCG,EAAW,EACXC,EAAa,KACbC,EAAYC,OAAOV,GAEvBQ,EAAaG,aAAY,WAuB3B,IAAuBC,EAAUT,GAtB/BI,GAAY,IAEM,IACdE,GAAaC,OAAOL,KAmBHO,EAhBLL,EAgBeJ,EAhBLM,EAkBnB,IAAII,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WAELH,EACFF,EAAQ,CAAEF,WAAUT,UAEpBY,EAAO,CAAEH,WAAUT,S,GAGpBA,E,KA3BAiB,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUT,EAAKkB,EAALlB,MACjBmB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAwCC,OAAfb,EAAS,QAAYa,OAANtB,EAAM,M,IAGvEuB,OAAM,SAAAL,G,IAAGT,EAAQS,EAART,SAAUT,EAAKkB,EAALlB,MAClBmB,EAAA7B,GAAS8B,OAAOI,QAAQ,sBAAuCF,OAAfb,EAAS,QAAYa,OAANtB,EAAM,M,IAIrEI,GAAYD,GACZsB,cAAcpB,E,GAEjBH,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const delay = evt.target.elements.delay.value;\n  const step = evt.target.elements.step.value;\n  const amount = evt.target.elements.amount.value;\n  let position = 0;\n  let intervalId = null;\n  let delayStep = Number(delay);\n  \n  intervalId = setInterval(() => {\n  position += 1;\n\n    if (position >= 2) {\n      delayStep += Number(step);\n    }\n    \n    createPromise(position, delayStep)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    \n    if (position >= amount) {\n        clearInterval(intervalId);\n      }\n  }, step);\n}\n \nfunction createPromise(position, delay) {\n   \n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      \n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }   \n\n    }, delay);\n  });\n }"],"names":["$iU1Pc","parcelRequire","document","querySelector","addEventListener","evt","preventDefault","delay1","target","elements","delay","value","step","amount","position1","intervalId","delayStep","Number","setInterval","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","clearInterval"],"version":3,"file":"03-promises.b86c19a5.js.map"}