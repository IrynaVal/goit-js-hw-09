{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAEJ,MAAMC,EAAQF,EAAIG,OAAOC,SAASC,MAAMC,MAClCC,EAAOP,EAAIG,OAAOC,SAASG,KAAKD,MAChCE,EAASR,EAAIG,OAAOC,SAASI,OAAOF,MAC1C,IAAIG,EAAW,EACXC,EAAa,KACbC,EAAYC,OAAOV,GAEvBQ,EAAaG,aAAY,KAuB3B,IAAuBC,EAAUT,EAtB/BI,GAAY,EAENA,GAAY,IACdE,GAAaC,OAAOL,KAmBHO,EAhBLL,EAgBeJ,EAhBLM,EAkBnB,IAAII,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KAELH,EACFF,EAAQ,C,SAAEF,E,MAAUT,IAEpBY,EAAO,C,SAAEH,E,MAAUT,GAAQ,GAG5BA,EAAM,KA3BNiB,MAAK,EAACR,SAAEA,EAAQT,MAAEA,MACjBkB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAqBX,QAAiBT,MAAU,IAGzEqB,OAAM,EAACZ,SAAEA,EAAQT,MAAEA,MAClBkB,EAAA5B,GAAS6B,OAAOG,QAAQ,sBAAoBb,QAAiBT,MAAU,IAIvEI,GAAYD,GACZoB,cAAclB,EAAW,GAE5BH,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const delay = evt.target.elements.delay.value;\n  const step = evt.target.elements.step.value;\n  const amount = evt.target.elements.amount.value;\n  let position = 0;\n  let intervalId = null;\n  let delayStep = Number(delay);\n  \n  intervalId = setInterval(() => {\n  position += 1;\n\n    if (position >= 2) {\n      delayStep += Number(step);\n    }\n    \n    createPromise(position, delayStep)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    \n    if (position >= amount) {\n        clearInterval(intervalId);\n      }\n  }, step);\n}\n \nfunction createPromise(position, delay) {\n   \n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      \n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }   \n\n    }, delay);\n  });\n }"],"names":["$eWCmQ","parcelRequire","document","querySelector","addEventListener","evt","preventDefault","delay1","target","elements","delay","value","step","amount","position1","intervalId","delayStep","Number","setInterval","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","$parcel$interopDefault","Notify","success","catch","failure","clearInterval"],"version":3,"file":"03-promises.d1d18c0c.js.map"}